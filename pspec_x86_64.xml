<PISI>
    <Source>
        <Name>qt6-webchannel</Name>
        <Packager>
            <Name>F. von Gellhorn</Name>
            <Email>flinux@vongellhorn.ch</Email>
        </Packager>
        <License>GFDL-1.3-or-later</License>
        <License>GPL-2.0-or-later</License>
        <License>LGPL-3.0-or-later</License>
        <PartOf>desktop.qt</PartOf>
        <Summary xml:lang="en">Qt6 Webchannel Module</Summary>
        <Description xml:lang="en">The Qt WebChannel module offers Qt applications a seamless way to publish QObjects for interaction with HTML/JavaScript clients. These clients can either be inside local Qt WebViews or any other, potentially remote, client which supports JavaScript, as long as a communication channel such as WebSocket is available.

Qt WebChannel uses introspection on the QObjects and sends this serialized data to the clients. There, with the help of a small JavaScript library, an object is created which simulates the API of the QObject. Any invokable methods, including slots, can be called as well as properties read and written. Additionally you can connect to signals and register JavaScript callbacks as handlers.
</Description>
        <Archive type="binary" sha1sum="79eb0752a961b8e0d15c77d298c97498fbc89c5a">https://getsol.us/sources/README.Solus</Archive>
    </Source>
    <Package>
        <Name>qt6-webchannel</Name>
        <Summary xml:lang="en">Qt6 Webchannel Module</Summary>
        <Description xml:lang="en">The Qt WebChannel module offers Qt applications a seamless way to publish QObjects for interaction with HTML/JavaScript clients. These clients can either be inside local Qt WebViews or any other, potentially remote, client which supports JavaScript, as long as a communication channel such as WebSocket is available.

Qt WebChannel uses introspection on the QObjects and sends this serialized data to the clients. There, with the help of a small JavaScript library, an object is created which simulates the API of the QObject. Any invokable methods, including slots, can be called as well as properties read and written. Additionally you can connect to signals and register JavaScript callbacks as handlers.
</Description>
        <PartOf>desktop.qt</PartOf>
        <Files>
            <Path fileType="library">/usr/lib64/libQt6WebChannel.prl</Path>
            <Path fileType="library">/usr/lib64/libQt6WebChannel.so.6</Path>
            <Path fileType="library">/usr/lib64/libQt6WebChannel.so.6.3.0</Path>
            <Path fileType="library">/usr/lib64/metatypes/qt6webchannel_relwithdebinfo_metatypes.json</Path>
            <Path fileType="library">/usr/lib64/qt6/qml/QtWebChannel/libwebchannelplugin.so</Path>
            <Path fileType="library">/usr/lib64/qt6/qml/QtWebChannel/plugins.qmltypes</Path>
            <Path fileType="library">/usr/lib64/qt6/qml/QtWebChannel/qmldir</Path>
            <Path fileType="data">/usr/share/qt6/modules/WebChannel.json</Path>
        </Files>
    </Package>
    <Package>
        <Name>qt6-webchannel-demos</Name>
        <Summary xml:lang="en">Qt6 Webchannel Module</Summary>
        <Description xml:lang="en">The Qt WebChannel module offers Qt applications a seamless way to publish QObjects for interaction with HTML/JavaScript clients. These clients can either be inside local Qt WebViews or any other, potentially remote, client which supports JavaScript, as long as a communication channel such as WebSocket is available.

Qt WebChannel uses introspection on the QObjects and sends this serialized data to the clients. There, with the help of a small JavaScript library, an object is created which simulates the API of the QObject. Any invokable methods, including slots, can be called as well as properties read and written. Additionally you can connect to signals and register JavaScript callbacks as handlers.
</Description>
        <PartOf>programming.library</PartOf>
        <RuntimeDependencies>
            <Dependency release="3">qt6-webchannel</Dependency>
        </RuntimeDependencies>
        <Files>
            <Path fileType="library">/usr/lib64/qt6/examples/webchannel/chatserver-cpp/chatserver</Path>
        </Files>
    </Package>
    <Package>
        <Name>qt6-webchannel-devel</Name>
        <Summary xml:lang="en">Development files for qt6-webchannel</Summary>
        <Description xml:lang="en">The Qt WebChannel module offers Qt applications a seamless way to publish QObjects for interaction with HTML/JavaScript clients. These clients can either be inside local Qt WebViews or any other, potentially remote, client which supports JavaScript, as long as a communication channel such as WebSocket is available.

Qt WebChannel uses introspection on the QObjects and sends this serialized data to the clients. There, with the help of a small JavaScript library, an object is created which simulates the API of the QObject. Any invokable methods, including slots, can be called as well as properties read and written. Additionally you can connect to signals and register JavaScript callbacks as handlers.
</Description>
        <PartOf>programming.devel</PartOf>
        <RuntimeDependencies>
            <Dependency release="3">qt6-webchannel</Dependency>
        </RuntimeDependencies>
        <Files>
            <Path fileType="header">/usr/include/qt6/QtWebChannel/6.3.0/QtWebChannel/private/qmetaobjectpublisher_p.h</Path>
            <Path fileType="header">/usr/include/qt6/QtWebChannel/6.3.0/QtWebChannel/private/qqmlwebchannelattached_p.h</Path>
            <Path fileType="header">/usr/include/qt6/QtWebChannel/6.3.0/QtWebChannel/private/qwebchannel_p.h</Path>
            <Path fileType="header">/usr/include/qt6/QtWebChannel/6.3.0/QtWebChannel/private/signalhandler_p.h</Path>
            <Path fileType="header">/usr/include/qt6/QtWebChannel/6.3.0/QtWebChannel/private/variantargument_p.h</Path>
            <Path fileType="header">/usr/include/qt6/QtWebChannel/QQmlWebChannel</Path>
            <Path fileType="header">/usr/include/qt6/QtWebChannel/QWebChannel</Path>
            <Path fileType="header">/usr/include/qt6/QtWebChannel/QWebChannelAbstractTransport</Path>
            <Path fileType="header">/usr/include/qt6/QtWebChannel/QtWebChannel</Path>
            <Path fileType="header">/usr/include/qt6/QtWebChannel/QtWebChannelDepends</Path>
            <Path fileType="header">/usr/include/qt6/QtWebChannel/QtWebChannelVersion</Path>
            <Path fileType="header">/usr/include/qt6/QtWebChannel/qqmlwebchannel.h</Path>
            <Path fileType="header">/usr/include/qt6/QtWebChannel/qtwebchannelexports.h</Path>
            <Path fileType="header">/usr/include/qt6/QtWebChannel/qtwebchannelversion.h</Path>
            <Path fileType="header">/usr/include/qt6/QtWebChannel/qwebchannel.h</Path>
            <Path fileType="header">/usr/include/qt6/QtWebChannel/qwebchannelabstracttransport.h</Path>
            <Path fileType="header">/usr/include/qt6/QtWebChannel/qwebchannelglobal.h</Path>
            <Path fileType="library">/usr/lib64/cmake/Qt6BuildInternals/StandaloneTests/QtWebChannelTestsConfig.cmake</Path>
            <Path fileType="library">/usr/lib64/cmake/Qt6Qml/QmlPlugins/Qt6webchannelAdditionalTargetInfo.cmake</Path>
            <Path fileType="library">/usr/lib64/cmake/Qt6Qml/QmlPlugins/Qt6webchannelConfig.cmake</Path>
            <Path fileType="library">/usr/lib64/cmake/Qt6Qml/QmlPlugins/Qt6webchannelConfigVersion.cmake</Path>
            <Path fileType="library">/usr/lib64/cmake/Qt6Qml/QmlPlugins/Qt6webchannelConfigVersionImpl.cmake</Path>
            <Path fileType="library">/usr/lib64/cmake/Qt6Qml/QmlPlugins/Qt6webchannelTargets-relwithdebinfo.cmake</Path>
            <Path fileType="library">/usr/lib64/cmake/Qt6Qml/QmlPlugins/Qt6webchannelTargets.cmake</Path>
            <Path fileType="library">/usr/lib64/cmake/Qt6WebChannel/Qt6WebChannelAdditionalTargetInfo.cmake</Path>
            <Path fileType="library">/usr/lib64/cmake/Qt6WebChannel/Qt6WebChannelConfig.cmake</Path>
            <Path fileType="library">/usr/lib64/cmake/Qt6WebChannel/Qt6WebChannelConfigVersion.cmake</Path>
            <Path fileType="library">/usr/lib64/cmake/Qt6WebChannel/Qt6WebChannelConfigVersionImpl.cmake</Path>
            <Path fileType="library">/usr/lib64/cmake/Qt6WebChannel/Qt6WebChannelDependencies.cmake</Path>
            <Path fileType="library">/usr/lib64/cmake/Qt6WebChannel/Qt6WebChannelTargets-relwithdebinfo.cmake</Path>
            <Path fileType="library">/usr/lib64/cmake/Qt6WebChannel/Qt6WebChannelTargets.cmake</Path>
            <Path fileType="library">/usr/lib64/cmake/Qt6WebChannel/Qt6WebChannelVersionlessTargets.cmake</Path>
            <Path fileType="library">/usr/lib64/libQt6WebChannel.so</Path>
            <Path fileType="data">/usr/lib64/pkgconfig/Qt6WebChannel.pc</Path>
            <Path fileType="library">/usr/lib64/qt6/mkspecs/modules/qt_lib_webchannel.pri</Path>
            <Path fileType="library">/usr/lib64/qt6/mkspecs/modules/qt_lib_webchannel_private.pri</Path>
        </Files>
    </Package>
    <History>
        <Update release="3">
            <Date>2022-04-18</Date>
            <Version>6.3.0</Version>
            <Comment>Packaging update</Comment>
            <Name>F. von Gellhorn</Name>
            <Email>flinux@vongellhorn.ch</Email>
        </Update>
    </History>
</PISI>